import chess
import chess.engine
import pyautogui
import keyboard
import time
import cv2
import numpy as np
from PIL import ImageGrab
import matplotlib.pyplot as plt
import math

color = ""

engine = chess.engine.SimpleEngine.popen_uci("stockfish/stockfish-windows-x86-64-avx2.exe")

def FindBestMove(fen):
    fen = fen
    board = chess.Board(fen)

    # Use Stockfish to find the best move for the position
    result = engine.play(board, chess.engine.Limit(time=2.0))
    best_move = result.move

    return best_move


print("Put your mouse on the bottom left corner of the chess board and press \"space\"")
keyboard.wait("space")
bcx, bcy = pyautogui.position()
print(bcx, bcy)
time.sleep(1)

print("Now put your mouse on the top right corner and press space.")
keyboard.wait("space")
tcx, tcy = pyautogui.position()
print(tcx, tcy)

x_difference = math.floor((tcx - bcx) / 8)
y_difference = math.floor((tcy - bcy) / 8)


piece_color = []

white_color = ()
black_color = ()

white_color_emptyspace = (238, 238, 213)
black_color_emptyspace = (124, 149, 93)

white_pawn = [] # x plus what = pawn position, y plus what = pawn position
white_rook = []
white_knight = []
white_bishop = []
white_queen = []
white_king = []

black_pawn = []
black_rook = []
black_knight = []
black_bishop = []
black_queen = []
black_king = []


board_coordinates = {}
board_piece_place = {} # coor: 'piece'

for row in range(1, 9):
    for col in range(1, 9):
        x = bcx + x_difference * col
        y = bcy + y_difference * col
        board_coordinates[row * col] = [x, y] #cell number: coordinates

for cell in board_coordinates:
  color_piece = pyautogui.pixel(list[cell][0] + piece_color[0], list[cell][1] + piece_color[1])

  if color_piece == white_color_emptyspace:
    board_piece_place[board_coordinates[cell] = "white_space"
  elif color_piece == black_color_emptyspace:
    board_piece_place[board_coordinates[cell] = "black_space"
  else:
    if color_piece == white_color:
      white_pawn_pixel = pyautogui.pixel(list[cell][0] + white_pawn[0], list[cell][1] + white_pawn[1]) # all the 'cell' are the cell number
      if pawn_pixel == ():
        board_piece_place[board_coordinates[cell] = "white_pawn"
      else:
        white_rook_pixel = pyautogui.pixel(list[cell][0] + white_pawn[0], list[cell][1] + white_pawn[1])
        if white_rook_pixel == ():
          board_piece_place[board_coordinates[cell] = "white_rook"
        else:
          white_knight_pixel = pyautogui.pixel(list[cell][0] + white_knight[0], list[cell][1] + white_knight[1])
          if white_knight_pixel == ():
            board_piece_place[board_coordinates[cell] = "white_knight"
          else:
            white_bishop_pixel = pyautogui.pixel(list[cell][0] + white_bishop[0], list[cell][1] + white_bishop[1])
            if white_bishop_pixel == ():
              board_piece_place[board_coordinates[cell] = "white_bishop"
            else:
              white_queen_pixel = pyautogui.pixel(list[cell][0] + white_queen[0], list[cell][1] + white_queen[1])
              if white_queen_pixel == ():
                board_piece_place[board_coordinates[cell] = "white_queen"
              else:
              white_king_pixel = pyautogui.pixel(list[cell][0] + white_king[0], list[cell][1] + white_king[1])
              if white_king_pixel == ():
                board_piece_place[board_coordinates[cell] = "white_king"
  
      else:
        black_pawn_pixel = pyautogui.pixel(list[cell][0] + black_pawn[0], list[cell][1] + black_pawn[1]) # all the 'cell' are the cell number
        if pawn_pixel == ():
          board_piece_place[board_coordinates[cell] = "black_pawn"
        else:
          black_rook_pixel = pyautogui.pixel(list[cell][0] + black_pawn[0], list[cell][1] + black_pawn[1])
          if black_rook_pixel == ():
            board_piece_place[board_coordinates[cell] = "black_rook"
          else:
            black_knight_pixel = pyautogui.pixel(list[cell][0] + black_knight[0], list[cell][1] + black_knight[1])
            if black_knight_pixel == ():
              board_piece_place[board_coordinates[cell] = "black_knight"
            else:
              black_bishop_pixel = pyautogui.pixel(list[cell][0] + black_bishop[0], list[cell][1] + black_bishop[1])
              if black_bishop_pixel == ():
                board_piece_place[board_coordinates[cell] = "black_bishop"
              else:
                black_queen_pixel = pyautogui.pixel(list[cell][0] + black_queen[0], list[cell][1] + black_queen[1])
                if black_queen_pixel == ():
                  board_piece_place[board_coordinates[cell] = "black_queen"
                else:
                black_king_pixel = pyautogui.pixel(list[cell][0] + black_king[0], list[cell][1] + black_king[1])
                if black_king_pixel == ():
                  board_piece_place[board_coordinates[cell] = "black_king"
    
  
engine.quit()
